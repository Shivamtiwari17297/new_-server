name: Run Terraform and Script on Server
on:
  push:
    branches:
      - main  # Trigger on push to the main branch   
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout the repository to get Terraform file
    - name: Checkout repository
      uses: actions/checkout@v2
    # Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.9.6  # Specify your Terraform version
    # Step 3: Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Key
        aws-region: ${{ secrets.AWS_REGION }}  # AWS Region
    # Step 4: Terraform initialization and execution
    - name: Initialize Terraform
      run: terraform init
    - name: Validate Terraform configuration
      run: terraform validate
    - name: Plan Terraform deployment
      run: terraform plan -out=tfplan
    - name: Apply Terraform configuration
      run: terraform apply -auto-approve tfplan
    # Step 5: Wait for the server to be ready (optional but recommended)
    - name: Wait for server to be ready
      run: sleep 10  # Adjust this based on how long your server takes to be ready
    # Step 6: Run the script on the server via SSH
    - name: Run script on server via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}  # Server IP stored in GitHub secrets
        username: ${{ secrets.SERVER_USER }}  # SSH user (e.g., ec2-user) stored in secrets
        key: ${{ secrets.SSH_PRIVATE_KEY }}  # SSH private key stored in secrets
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd /home/ec2-user  # Navigate to the script location on the server
          ./python_install.sh  # Run your custom script
